# ~/.assh/assh.conf

#  set this path only if gpg tools wasn't found 

#exec_gpg2 = /usr/bin/gpg2
#exec_gpgagent = /usr/bin/gpg-agent
#exec_pinentry = /usr/bin/pinentry

#  set asshpm path only if not found

#exec_pm       = ~/.bin/asshpm

#  set path for netcat (bsd version) 

#exec_nc = /usr/bin/nc.openbsd 
#exec_corkscrew = ~/.assh/bin/corkscrew

#  set for curl with scp support
#exec_curl = /usr/local/curl/bin/curl

#  set proxy settings
#  proxy is off by default 

#proxy = off

#proxy_url = socks5://localhost:1080

#option for proxy_default cli | db | config

#proxy_default = cli

#proxy_filter = SOME_REGULAR_EXP_HERE

#  set global port knocking sequence 
#  knock_seq = port1,port2,...,portN
#  no defaults

#knock_seq = 1111,2222,3333


# URL to fetch external databases 

#FTP(S) Server :   
# - without SSL 
#dbserver = ftp://user:password@host:port/path/to/database.gz
# - over SSL 
#dbserver = ftps://user:password@host:port/path/to/database.gz
#HTTP(S) Server 
# - without HTTP Authentication
#dbserver = http://example.net/path/to/database.gz
# - with HTTP Authentication
#dbserver = http://user:password@example.net/path/to/database.gz
#SSH Server  
# - with password authenication   
#dbserver = scp://user:password@host:port/path/to/database.gz
# - with Public Key Authentication
#dbserver = scp://user@host:port/path/to/database.gz



#  set passwords ttl for gpg agent
#  default: 3660
agentttl = 9000 

#  set ui for pinentry [-curses | -gtk-2 | -qt | -qt4 ]
#  try to use gtk2 or qt4 in multiterm environment 
#  default: -curses

#pinui = -curses

#  path to your password database file 
#  passwdb = ~/.assh/main.gpg,~/.assh/private.gpg
#  default: ~/.assh/main.gpg
#  DEFAULT PASSWORD = asshpass

passwdb = ~/.assh/main.gpg

#  set your passphrase (md5) for parallel/serial mode - leave blank if you would like 
#  to disable it, remenber  this is not passphrase for encrypting or decrypting password database file 
#  - new md5 passphrase can be generated by below command
#    1) perl -MDigest::MD5 -e 'print Digest::MD5->new->add(YOUR_PASSPHRASE_HERE)->hexdigest;'
#    2) echo -n YOUR_PASSPHRASE_HERE | openssl md5
#    
# DEFAULT PASSPHRASE = asshpass

passphrase = c61711939bf0bbeea3e36131dce6ebf1

#  set colors or work with mono style
#  default: on

#color = off

#  set tooltips prints some additional information with some options
#  default: on 

#tooltips = on

#  use second user environment (use su -) 
#  its the same as -l option (now its default)

#suenv = off

# -- ASSHPM only -- # 

#  if true public key cryptography is used, 
#  else symmetric cryptography is used
#  default is off

#pubkey = on

#  set your key-id (pub)
#  ex. recipeint = youkeyID

#recipient = EFF61775

#  for more recipients 
#  ex. recipents = keyID1,keyID2,..,keyIDn

#recipients = LP9GXA0G,OXBS7EFM,5ZSXMM7A,8LIY9OR1

#  set symmetric algorythm
#  ex. cast5,twofish,blowfish,aes,aes192,aes256

#cipher_algo = aes256

#  set compression algorythm 
#  ex. none,zlib,zip

#compress_algo = Zlib



# ASSH3 COMMAND ALIASING


#defcmd::alias grep='grep --color';

# Examples: CMD{}
#cmd_alias:echoargs:CMD{echo "cmdarg0=$CMDARG[0] , cmdarg1=$CMDARG[1]"}

#cmd_alias:killall:CMD{[[ -n $(which $CMDARG[1]) ]] &&  (killall -9 $(which $CMDARG[1])) || echo 'No path for $CMDARG[1] found' }
#cmd_alias:kill:CMD{[[ -n $(ps -C $CMDARG[1] -o pid=) ]] && (ps -C $CMDARG[1] -o pid= | xargs kill -9) || echo 'Noprocesses for $CMDARG[1] found'}
#cmd_alias:eg:CMD{exigrep $CMDARG[1] /var/log/exim/mainlog }
#cmd_alias:ve:CMD{vzctl enter $CMDARG[1]}

# Examples: FILE{}
#cmd_alias:ege:FILE{~/.assh/cmdals/ege.txt}
# Examples: CODE{}
#cmd_alias:cdd2:CODE{~/.assh/cmdals/cdd.txt}
#
